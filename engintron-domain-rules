#!/bin/sh
# Domain Rules Generator for Engintron: https://github.com/zhubanRuban/engintron-domain-rules
# Copyright zhubanRuban: https://github.com/zhubanRuban
# Licensed under the Apache License 2.0: http://www.apache.org/licenses/LICENSE-2.0
# Engintron:
#  * @url        https://engintron.com
#  * @copyright  Copyright (c) 2018 - 2019 Kodeka OÃœ. All rights reserved.
#  * @license    GNU/GPL license: https://www.gnu.org/copyleft/gpl.html

# functions
helpmes() {
echo '
# Domain Rules Generator for Engintron
# https://github.com/zhubanRuban/engintron-domain-rules
Usage:
	'"$WHEREAMI"' [option]
Options:
		-h|--help|help      : show this message
		gen|generate        : generate rules and apply
		fogen|forcegenerate : the same even if no hosts were added/deleted/changed recently
		dryrun              : display generated rules that will be applied, but do not apply
		show                : show currently applied rules
		install             : install cron
		remove|uninstall    : remove cron and previously generated rules
'
exit
}

printmes() { sed "s/^/$(date) | /g" <<< "$@"; }

printlog() { printmes "$@" | tee -a "$LOGFILE"; }

domrules() {
echo '# BEGIN Domain rules for Engintron generated by '"$WHEREAMI"' on '"$(date)"; echo
for USERDATAFILE in $(grep -lE '^server(name|alias):' /var/cpanel/userdata/*/*|sed '/_SSL$/d'); do
	echo '# '"$USERDATAFILE"'{,_SSL}'
	HOSTARRAY=$(grep -E '^server(name|alias):' ${USERDATAFILE}{,_SSL} 2>/dev/null|awk -F': ' '{print $2}'|sed 's/[[:space:]]/\n/g'|sort -u|sed ':a;N;$!ba;s/\n/|/g')
	IPADDR=$(grep -E '^ip:' ${USERDATAFILE}{,_SSL} 2>/dev/null|awk -F': ' '{print $2}'|head -n1)
	echo '	if ($host ~* "'"$HOSTARRAY"'") {
		set $PROXY_DOMAIN_OR_IP "'"$IPADDR"'";
	}'; echo
done
echo '# END Domain rules for Engintron generated by '"$WHEREAMI"' on '"$(date)"
}

showrules() { sed -n "/# BEGIN .*${WHATSMYNAME}/,/# END .*${WHATSMYNAME}/p" "$RULES"; }

delrules() { printlog Deleting domain rules from "$RULES"; sed -i "/# BEGIN .*${WHATSMYNAME}/,/# END .*${WHATSMYNAME}/d" "$RULES"; }

gendomrules() {
	[ "$TMPFILE" -nt "$RULES" ] && [ "$TMPFILE" -nt "$HTTPDCONF" ] && { printmes No updates to "$RULES" or "$HTTPDCONF"; exit; }
	[ "$RULES" -nt "$TMPFILE" ] && printlog "$RULES" has updates
	[ "$HTTPDCONF" -nt "$TMPFILE" ] && printlog "$HTTPDCONF" has updates
	forcegendomrules
}

forcegendomrules() {
	if [ -f "$LOGFILE" ] && [ "$(stat -c %s "$LOGFILE")" -gt "100000000" ]; then
		rm -f "${LOGFILE}.gz"
		gzip "$LOGFILE"
	fi
	delrules
	printlog "$WHEREAMI" started domain rules generation
	domrules >> "$RULES"
	service nginx reload
	printlog "$WHEREAMI" finished domain rules generation
	sleep 1; printmes '# Generated by '"$WHEREAMI" > "$TMPFILE"
}

installrules() {
	chmod +x $WHEREAMI
	echo '# Generated by '"$WHEREAMI"' on '"$(date)"'
SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
* * * * * root '"$WHEREAMI"' generate > /dev/null 2>&1' > $CRONFILE
	service crond restart
	printlog "$WHEREAMI" cron installed
	forcegendomrules
	exit
}

remrules() {
	rm -f "$TMPFILE" "$CRONFILE"
	service crond restart
	delrules
	service nginx reload
	printlog "$WHEREAMI" cron and rules removed
	exit
}

[[ $EUID -ne 0 ]] && { printmes This script must be run as root; exit 1; }
grep -q Engintron /etc/nginx/nginx.conf 2>/dev/null || { prinmes Engintron not installed; exit 1; }

WHATSMYNAME=$(basename $0)
WHEREAMI=$(readlink -f $0)
RULES=/etc/nginx/custom_rules
HTTPDCONF=/etc/apache2/conf/httpd.conf
LOGFILE=/var/log/nginx/${WHATSMYNAME}.log
CRONFILE=/etc/cron.d/${WHATSMYNAME}
TMPFILE=/tmp/${WHATSMYNAME}.tmp

case "$@" in
	-h|--help|help)			helpmes;;
	gen|generate)			gendomrules;;
	fogen|forcegenerate)	forcegendomrules;;
	dryrun)					domrules;;
	show)					showrules;;
	install)				installrules;;
	remove|uninstall)		remrules;;
	*)						helpmes;;
esac